import { Glossary, Term } from "../types/glossary";
import { z } from "zod";
import { AICompletionService } from "../services/interfaces/ai-completion.interface";
import { zodSchemaToJsonExample } from "../llm/utils/zod-schema.utils";

export class GlossarySearchService {
    private readonly INITIAL_PROMPT_TEMPLATE = `Tu es un assistant charg√© de construire un glossaire √† partir d'une transcription de meeting d'entreprise.
Pour chaque terme interne √† l'entreprise que tu trouves dans ce meeeting, d√©termine leur
signification √† partir de la transcription.
Si la transcription ne te permets pas de d√©terminer leur signification du terme,
alors mets simplement "-" comme d√©finition.

Si c'est ta premi√®re it√©ration de construction de glossaire, is_new sera toujours true.

Voici la transcription:
"""
{input}
"""`;

    private readonly ITERATION_PROMPT_TEMPLATE = `fait un double check. liste uniquement les oublis ou les modifications.`;

    private debug: boolean = false;

    constructor(
        private readonly aiService: AICompletionService,
        debug: boolean = false
    ) {
        this.debug = debug;
    }

    private log(...args: any[]) {
        if (this.debug) {
            console.log(...args);
        }
    }

    async findGlossaryTerms(content: string, maxTry: number): Promise<Glossary> {
        // D√©finition du sch√©ma pour la validation
        const glossarySchema = z.object({
            termes: z.array(z.object({
                terme: z.string().describe("le terme technique trouv√©"),
                definition: z.string().describe("la d√©finition du terme trouv√© dans la transcription, ou '-' si non trouv√©"),
                is_new: z.boolean().describe("true si c'est un nouveau terme")
            }))
        });

        try {
            // Initialisation des messages avec le template initial
            let messages = [
                {
                    role: 'system' as const,
                    content: `${this.INITIAL_PROMPT_TEMPLATE.replace("{input}", content)}
                    R√©ponds en JSON avec le format suivant:
                    ${zodSchemaToJsonExample(glossarySchema)}`
                },
                {
                    role: 'user' as const,
                    content: content
                }
            ];

            // G√©n√©ration initiale
            let response = await this.aiService.generateStructuredResponse<Glossary>(
                messages,
            );

            // Initialiser le glossaire final avec la premi√®re r√©ponse
            let finalGlossary: Glossary = {
                termes: [...response.termes]
            };

            this.log("\nüìö Glossaire initial:", 
                finalGlossary.termes.map(t => `\n  - ${t.terme}: ${t.definition}`).join('')
            );

            let tries = 0;

            // It√©rations pour affiner le glossaire
            while (tries < maxTry) {
                // Ajouter le message syst√®me pour l'it√©ration
                messages.push({
                    role: 'system' as const,
                    content: `${this.ITERATION_PROMPT_TEMPLATE}
                    Glossaire pr√©c√©dent:
                    ${JSON.stringify(finalGlossary, null, 2)}
                    
                    R√©ponds en JSON avec le m√™me format que pr√©c√©demment.`
                });

                // Ajouter le contenu utilisateur pour cette it√©ration
                messages.push({
                    role: 'user' as const,
                    content: content
                });

                response = await this.aiService.generateStructuredResponse<Glossary>(
                    messages,
                );

                this.log(`\nüìù It√©ration ${tries + 1}:`,
                    response.termes.map(t => `\n  - ${t.terme}: ${t.definition}${t.is_new ? ' (nouveau)' : ''}`).join('')
                );

                // Mettre √† jour le glossaire final avec les nouveaux termes (logique Python)
                const updatedTerms = new Map(response.termes.map(term => [term.terme, term]));
                const finalTerms = new Map(finalGlossary.termes.map(term => [term.terme, term]));
                
                // Fusionner les maps, en donnant la priorit√© aux nouveaux termes
                updatedTerms.forEach((term, key) => {
                    finalTerms.set(key, term);
                });
                
                finalGlossary = {
                    termes: Array.from(finalTerms.values())
                };

                // Si aucun nouveau terme n'est trouv√©, on arr√™te
                if (!response.termes.some(term => term.is_new)) {
                    this.log("\n‚ú® Aucun nouveau terme trouv√©, arr√™t des it√©rations");
                    break;
                }

                tries++;
            }

            if (tries >= maxTry) {
                this.log(`\n‚ö†Ô∏è Nombre maximum d'essais atteint (${maxTry})`);
            }

            this.log("\nüéØ Glossaire final:", 
                finalGlossary.termes.map(t => `\n  - ${t.terme}: ${t.definition}`).join('')
            );

            return finalGlossary;
        } catch (error) {
            console.error("‚ùå Erreur lors de la g√©n√©ration du glossaire:", error);
            throw error;
        }
    }
}
